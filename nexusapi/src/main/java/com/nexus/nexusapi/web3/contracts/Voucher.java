package com.nexus.nexusapi.web3.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.7.
 */
@SuppressWarnings("rawtypes")
public class Voucher extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b506040518060400160405280600c81526020017f4e65787573566f756368657200000000000000000000000000000000000000008152506040518060400160405280600381526020017f4e5856000000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000412565b508060019081620000a1919062000412565b505050620000c4620000b8620000ca60201b60201c565b620000d260201b60201c565b620004f9565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200021a57607f821691505b60208210810362000230576200022f620001d2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200029a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200025b565b620002a686836200025b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002f3620002ed620002e784620002be565b620002c8565b620002be565b9050919050565b6000819050919050565b6200030f83620002d2565b620003276200031e82620002fa565b84845462000268565b825550505050565b600090565b6200033e6200032f565b6200034b81848462000304565b505050565b5b8181101562000373576200036760008262000334565b60018101905062000351565b5050565b601f821115620003c2576200038c8162000236565b62000397846200024b565b81016020851015620003a7578190505b620003bf620003b6856200024b565b83018262000350565b50505b505050565b600082821c905092915050565b6000620003e760001984600802620003c7565b1980831691505092915050565b6000620004028383620003d4565b9150826002028217905092915050565b6200041d8262000198565b67ffffffffffffffff811115620004395762000438620001a3565b5b62000445825462000201565b6200045282828562000377565b600060209050601f8311600181146200048a576000841562000475578287015190505b620004818582620003f4565b865550620004f1565b601f1984166200049a8662000236565b60005b82811015620004c4578489015182556001820191506020850194506020810190506200049d565b86831015620004e45784890151620004e0601f891682620003d4565b8355505b6001600288020188555050505b505050505050565b61384580620005096000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80637bde82f2116100ad578063b88d4fde11610071578063b88d4fde14610341578063c605f76c1461035d578063c87b56dd1461037b578063e985e9c5146103ab578063f2fde38b146103db5761012c565b80637bde82f21461029d5780638cc17c30146102b95780638da5cb5b146102e957806395d89b4114610307578063a22cb465146103255761012c565b806323b872dd116100f457806323b872dd146101fb57806342842e0e146102175780636352211e1461023357806370a0823114610263578063715018a6146102935761012c565b806301ffc9a71461013157806306fdde0314610161578063081812fc1461017f578063095ea7b3146101af5780630cfa2fd8146101cb575b600080fd5b61014b60048036038101906101469190612241565b6103f7565b6040516101589190612289565b60405180910390f35b610169610458565b6040516101769190612334565b60405180910390f35b6101996004803603810190610194919061238c565b6104ea565b6040516101a691906123fa565b60405180910390f35b6101c960048036038101906101c49190612441565b610530565b005b6101e560048036038101906101e0919061238c565b610647565b6040516101f29190612587565b60405180910390f35b610215600480360381019061021091906125a9565b6108e1565b005b610231600480360381019061022c91906125a9565b610941565b005b61024d6004803603810190610248919061238c565b610961565b60405161025a91906123fa565b60405180910390f35b61027d600480360381019061027891906125fc565b6109e7565b60405161028a9190612638565b60405180910390f35b61029b610a9e565b005b6102b760048036038101906102b29190612653565b610ab2565b005b6102d360048036038101906102ce919061290e565b610b32565b6040516102e09190612638565b60405180910390f35b6102f1610c50565b6040516102fe91906123fa565b60405180910390f35b61030f610c7a565b60405161031c9190612334565b60405180910390f35b61033f600480360381019061033a9190612999565b610d0c565b005b61035b60048036038101906103569190612a7a565b610d22565b005b610365610d84565b6040516103729190612334565b60405180910390f35b6103956004803603810190610390919061238c565b610dc1565b6040516103a29190612334565b60405180910390f35b6103c560048036038101906103c09190612afd565b610ed3565b6040516103d29190612289565b60405180910390f35b6103f560048036038101906103f091906125fc565b610f67565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610451575061045082610fea565b5b9050919050565b60606000805461046790612b6c565b80601f016020809104026020016040519081016040528092919081815260200182805461049390612b6c565b80156104e05780601f106104b5576101008083540402835291602001916104e0565b820191906000526020600020905b8154815290600101906020018083116104c357829003601f168201915b5050505050905090565b60006104f5826110cc565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061053b82610961565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a290612c0f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105ca611117565b73ffffffffffffffffffffffffffffffffffffffff1614806105f957506105f8816105f3611117565b610ed3565b5b610638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062f90612ca1565b60405180910390fd5b610642838361111f565b505050565b61064f61219d565b600960008381526020019081526020016000206040518060c001604052908160008201805461067d90612b6c565b80601f01602080910402602001604051908101604052809291908181526020018280546106a990612b6c565b80156106f65780601f106106cb576101008083540402835291602001916106f6565b820191906000526020600020905b8154815290600101906020018083116106d957829003601f168201915b5050505050815260200160018201805461070f90612b6c565b80601f016020809104026020016040519081016040528092919081815260200182805461073b90612b6c565b80156107885780601f1061075d57610100808354040283529160200191610788565b820191906000526020600020905b81548152906001019060200180831161076b57829003601f168201915b505050505081526020016002820180546107a190612b6c565b80601f01602080910402602001604051908101604052809291908181526020018280546107cd90612b6c565b801561081a5780601f106107ef5761010080835404028352916020019161081a565b820191906000526020600020905b8154815290600101906020018083116107fd57829003601f168201915b5050505050815260200160038201805461083390612b6c565b80601f016020809104026020016040519081016040528092919081815260200182805461085f90612b6c565b80156108ac5780601f10610881576101008083540402835291602001916108ac565b820191906000526020600020905b81548152906001019060200180831161088f57829003601f168201915b505050505081526020016004820160009054906101000a900460ff161515151581526020016005820154815250509050919050565b6108f26108ec611117565b826111d8565b610931576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092890612d33565b60405180910390fd5b61093c83838361126d565b505050565b61095c83838360405180602001604052806000815250610d22565b505050565b60008061096d83611566565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d590612d9f565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4e90612e31565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610aa66115a3565b610ab06000611621565b565b610abb826116e7565b60016009600084815260200190815260200160002060040160006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff16827f2d3099bcbed5869eea6ce6e721ef55f107c936f9243bbc491edda76242f93cfd60405160405180910390a35050565b6000610b3c6115a3565b610b4660086117ef565b6000610b526008611805565b9050610b5e8582611813565b610b688185611a30565b82600960008381526020019081526020016000206000820151816000019081610b919190612ffd565b506020820151816001019081610ba79190612ffd565b506040820151816002019081610bbd9190612ffd565b506060820151816003019081610bd39190612ffd565b5060808201518160040160006101000a81548160ff02191690831515021790555060a082015181600501559050508473ffffffffffffffffffffffffffffffffffffffff16817f36788a01894812061bf3641fcbe673afab7b6d603992294baddab7df93de6f1660405160405180910390a3809150509392505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610c8990612b6c565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb590612b6c565b8015610d025780601f10610cd757610100808354040283529160200191610d02565b820191906000526020600020905b815481529060010190602001808311610ce557829003601f168201915b5050505050905090565b610d1e610d17611117565b8383611ad4565b5050565b610d33610d2d611117565b836111d8565b610d72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6990612d33565b60405180910390fd5b610d7e84848484611c40565b50505050565b60606040518060400160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250905090565b6060610dcc826110cc565b6000600660008481526020019081526020016000208054610dec90612b6c565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1890612b6c565b8015610e655780601f10610e3a57610100808354040283529160200191610e65565b820191906000526020600020905b815481529060010190602001808311610e4857829003601f168201915b505050505090506000610e76611c9c565b90506000815103610e8b578192505050610ece565b600082511115610ec0578082604051602001610ea892919061310b565b60405160208183030381529060405292505050610ece565b610ec984611cb3565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610f6f6115a3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd5906131a1565b60405180910390fd5b610fe781611621565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806110b557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110c557506110c482611d1b565b5b9050919050565b6110d581611d85565b611114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110b90612d9f565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661119283610961565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806111e483610961565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061122657506112258185610ed3565b5b8061126457508373ffffffffffffffffffffffffffffffffffffffff1661124c846104ea565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661128d82610961565b73ffffffffffffffffffffffffffffffffffffffff16146112e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112da90613233565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611352576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611349906132c5565b60405180910390fd5b61135f8383836001611dc6565b8273ffffffffffffffffffffffffffffffffffffffff1661137f82610961565b73ffffffffffffffffffffffffffffffffffffffff16146113d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cc90613233565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115618383836001611dcc565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6115ab611117565b73ffffffffffffffffffffffffffffffffffffffff166115c9610c50565b73ffffffffffffffffffffffffffffffffffffffff161461161f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161690613331565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6116f081611d85565b61172f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117269061339d565b60405180910390fd5b6009600082815260200190815260200160002060040160009054906101000a900460ff1615611793576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178a90613409565b60405180910390fd5b42600960008381526020019081526020016000206005015410156117ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e390613475565b60405180910390fd5b50565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611882576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611879906134e1565b60405180910390fd5b61188b81611d85565b156118cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c29061354d565b60405180910390fd5b6118d9600083836001611dc6565b6118e281611d85565b15611922576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119199061354d565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611a2c600083836001611dcc565b5050565b611a3982611d85565b611a78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6f906135df565b60405180910390fd5b80600660008481526020019081526020016000209081611a989190612ffd565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051611ac89190612638565b60405180910390a15050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611b42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b399061364b565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611c339190612289565b60405180910390a3505050565b611c4b84848461126d565b611c5784848484611dd2565b611c96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8d906136dd565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611cbe826110cc565b6000611cc8611c9c565b90506000815111611ce85760405180602001604052806000815250611d13565b80611cf284611f59565b604051602001611d0392919061310b565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611da783611566565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b6000611df38473ffffffffffffffffffffffffffffffffffffffff16612027565b15611f4c578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611e1c611117565b8786866040518563ffffffff1660e01b8152600401611e3e9493929190613752565b6020604051808303816000875af1925050508015611e7a57506040513d601f19601f82011682018060405250810190611e7791906137b3565b60015b611efc573d8060008114611eaa576040519150601f19603f3d011682016040523d82523d6000602084013e611eaf565b606091505b506000815103611ef4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eeb906136dd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611f51565b600190505b949350505050565b606060006001611f688461204a565b01905060008167ffffffffffffffff811115611f8757611f8661269d565b5b6040519080825280601f01601f191660200182016040528015611fb95781602001600182028036833780820191505090505b509050600082602001820190505b60011561201c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816120105761200f6137e0565b5b04945060008503611fc7575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106120a8577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161209e5761209d6137e0565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106120e5576d04ee2d6d415b85acef810000000083816120db576120da6137e0565b5b0492506020810190505b662386f26fc10000831061211457662386f26fc10000838161210a576121096137e0565b5b0492506010810190505b6305f5e100831061213d576305f5e1008381612133576121326137e0565b5b0492506008810190505b6127108310612162576127108381612158576121576137e0565b5b0492506004810190505b60648310612185576064838161217b5761217a6137e0565b5b0492506002810190505b600a8310612194576001810190505b80915050919050565b6040518060c0016040528060608152602001606081526020016060815260200160608152602001600015158152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61221e816121e9565b811461222957600080fd5b50565b60008135905061223b81612215565b92915050565b600060208284031215612257576122566121df565b5b60006122658482850161222c565b91505092915050565b60008115159050919050565b6122838161226e565b82525050565b600060208201905061229e600083018461227a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122de5780820151818401526020810190506122c3565b60008484015250505050565b6000601f19601f8301169050919050565b6000612306826122a4565b61231081856122af565b93506123208185602086016122c0565b612329816122ea565b840191505092915050565b6000602082019050818103600083015261234e81846122fb565b905092915050565b6000819050919050565b61236981612356565b811461237457600080fd5b50565b60008135905061238681612360565b92915050565b6000602082840312156123a2576123a16121df565b5b60006123b084828501612377565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123e4826123b9565b9050919050565b6123f4816123d9565b82525050565b600060208201905061240f60008301846123eb565b92915050565b61241e816123d9565b811461242957600080fd5b50565b60008135905061243b81612415565b92915050565b60008060408385031215612458576124576121df565b5b60006124668582860161242c565b925050602061247785828601612377565b9150509250929050565b600082825260208201905092915050565b600061249d826122a4565b6124a78185612481565b93506124b78185602086016122c0565b6124c0816122ea565b840191505092915050565b6124d48161226e565b82525050565b6124e381612356565b82525050565b600060c08301600083015184820360008601526125068282612492565b915050602083015184820360208601526125208282612492565b9150506040830151848203604086015261253a8282612492565b915050606083015184820360608601526125548282612492565b915050608083015161256960808601826124cb565b5060a083015161257c60a08601826124da565b508091505092915050565b600060208201905081810360008301526125a181846124e9565b905092915050565b6000806000606084860312156125c2576125c16121df565b5b60006125d08682870161242c565b93505060206125e18682870161242c565b92505060406125f286828701612377565b9150509250925092565b600060208284031215612612576126116121df565b5b60006126208482850161242c565b91505092915050565b61263281612356565b82525050565b600060208201905061264d6000830184612629565b92915050565b6000806040838503121561266a576126696121df565b5b600061267885828601612377565b92505060206126898582860161242c565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6126d5826122ea565b810181811067ffffffffffffffff821117156126f4576126f361269d565b5b80604052505050565b60006127076121d5565b905061271382826126cc565b919050565b600067ffffffffffffffff8211156127335761273261269d565b5b61273c826122ea565b9050602081019050919050565b82818337600083830152505050565b600061276b61276684612718565b6126fd565b90508281526020810184848401111561278757612786612698565b5b612792848285612749565b509392505050565b600082601f8301126127af576127ae612693565b5b81356127bf848260208601612758565b91505092915050565b600080fd5b600080fd5b6127db8161226e565b81146127e657600080fd5b50565b6000813590506127f8816127d2565b92915050565b600060c08284031215612814576128136127c8565b5b61281e60c06126fd565b9050600082013567ffffffffffffffff81111561283e5761283d6127cd565b5b61284a8482850161279a565b600083015250602082013567ffffffffffffffff81111561286e5761286d6127cd565b5b61287a8482850161279a565b602083015250604082013567ffffffffffffffff81111561289e5761289d6127cd565b5b6128aa8482850161279a565b604083015250606082013567ffffffffffffffff8111156128ce576128cd6127cd565b5b6128da8482850161279a565b60608301525060806128ee848285016127e9565b60808301525060a061290284828501612377565b60a08301525092915050565b600080600060608486031215612927576129266121df565b5b60006129358682870161242c565b935050602084013567ffffffffffffffff811115612956576129556121e4565b5b6129628682870161279a565b925050604084013567ffffffffffffffff811115612983576129826121e4565b5b61298f868287016127fe565b9150509250925092565b600080604083850312156129b0576129af6121df565b5b60006129be8582860161242c565b92505060206129cf858286016127e9565b9150509250929050565b600067ffffffffffffffff8211156129f4576129f361269d565b5b6129fd826122ea565b9050602081019050919050565b6000612a1d612a18846129d9565b6126fd565b905082815260208101848484011115612a3957612a38612698565b5b612a44848285612749565b509392505050565b600082601f830112612a6157612a60612693565b5b8135612a71848260208601612a0a565b91505092915050565b60008060008060808587031215612a9457612a936121df565b5b6000612aa28782880161242c565b9450506020612ab38782880161242c565b9350506040612ac487828801612377565b925050606085013567ffffffffffffffff811115612ae557612ae46121e4565b5b612af187828801612a4c565b91505092959194509250565b60008060408385031215612b1457612b136121df565b5b6000612b228582860161242c565b9250506020612b338582860161242c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612b8457607f821691505b602082108103612b9757612b96612b3d565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612bf96021836122af565b9150612c0482612b9d565b604082019050919050565b60006020820190508181036000830152612c2881612bec565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612c8b603d836122af565b9150612c9682612c2f565b604082019050919050565b60006020820190508181036000830152612cba81612c7e565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612d1d602d836122af565b9150612d2882612cc1565b604082019050919050565b60006020820190508181036000830152612d4c81612d10565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612d896018836122af565b9150612d9482612d53565b602082019050919050565b60006020820190508181036000830152612db881612d7c565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612e1b6029836122af565b9150612e2682612dbf565b604082019050919050565b60006020820190508181036000830152612e4a81612e0e565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612eb37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612e76565b612ebd8683612e76565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612efa612ef5612ef084612356565b612ed5565b612356565b9050919050565b6000819050919050565b612f1483612edf565b612f28612f2082612f01565b848454612e83565b825550505050565b600090565b612f3d612f30565b612f48818484612f0b565b505050565b5b81811015612f6c57612f61600082612f35565b600181019050612f4e565b5050565b601f821115612fb157612f8281612e51565b612f8b84612e66565b81016020851015612f9a578190505b612fae612fa685612e66565b830182612f4d565b50505b505050565b600082821c905092915050565b6000612fd460001984600802612fb6565b1980831691505092915050565b6000612fed8383612fc3565b9150826002028217905092915050565b613006826122a4565b67ffffffffffffffff81111561301f5761301e61269d565b5b6130298254612b6c565b613034828285612f70565b600060209050601f8311600181146130675760008415613055578287015190505b61305f8582612fe1565b8655506130c7565b601f19841661307586612e51565b60005b8281101561309d57848901518255600182019150602085019450602081019050613078565b868310156130ba57848901516130b6601f891682612fc3565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60006130e5826122a4565b6130ef81856130cf565b93506130ff8185602086016122c0565b80840191505092915050565b600061311782856130da565b915061312382846130da565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061318b6026836122af565b91506131968261312f565b604082019050919050565b600060208201905081810360008301526131ba8161317e565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061321d6025836122af565b9150613228826131c1565b604082019050919050565b6000602082019050818103600083015261324c81613210565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006132af6024836122af565b91506132ba82613253565b604082019050919050565b600060208201905081810360008301526132de816132a2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061331b6020836122af565b9150613326826132e5565b602082019050919050565b6000602082019050818103600083015261334a8161330e565b9050919050565b7f566f756368657220646f6573206e6f7420657869737400000000000000000000600082015250565b60006133876016836122af565b915061339282613351565b602082019050919050565b600060208201905081810360008301526133b68161337a565b9050919050565b7f566f756368657220616c72656164792072656465656d65640000000000000000600082015250565b60006133f36018836122af565b91506133fe826133bd565b602082019050919050565b60006020820190508181036000830152613422816133e6565b9050919050565b7f566f756368657220686173206578706972656400000000000000000000000000600082015250565b600061345f6013836122af565b915061346a82613429565b602082019050919050565b6000602082019050818103600083015261348e81613452565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006134cb6020836122af565b91506134d682613495565b602082019050919050565b600060208201905081810360008301526134fa816134be565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613537601c836122af565b915061354282613501565b602082019050919050565b600060208201905081810360008301526135668161352a565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006135c9602e836122af565b91506135d48261356d565b604082019050919050565b600060208201905081810360008301526135f8816135bc565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006136356019836122af565b9150613640826135ff565b602082019050919050565b6000602082019050818103600083015261366481613628565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006136c76032836122af565b91506136d28261366b565b604082019050919050565b600060208201905081810360008301526136f6816136ba565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000613724826136fd565b61372e8185613708565b935061373e8185602086016122c0565b613747816122ea565b840191505092915050565b600060808201905061376760008301876123eb565b61377460208301866123eb565b6137816040830185612629565b81810360608301526137938184613719565b905095945050505050565b6000815190506137ad81612215565b92915050565b6000602082840312156137c9576137c86121df565b5b60006137d78482850161379e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220ca67148fcbe4c845b08ac361f0d45eebfc848f900564d8c1c437b08cc534ebae64736f6c63430008130033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETVOUCHER = "getVoucher";

    public static final String FUNC_HELLOWORLD = "helloWorld";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINTVOUCHER = "mintVoucher";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_REDEEM = "redeem";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event BATCHMETADATAUPDATE_EVENT = new Event("BatchMetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event METADATAUPDATE_EVENT = new Event("MetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event VOUCHERMINTED_EVENT = new Event("VoucherMinted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event VOUCHERREDEEMED_EVENT = new Event("VoucherRedeemed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected Voucher(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Voucher(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Voucher(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Voucher(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<BatchMetadataUpdateEventResponse> getBatchMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<BatchMetadataUpdateEventResponse> responses = new ArrayList<BatchMetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BatchMetadataUpdateEventResponse>() {
            @Override
            public BatchMetadataUpdateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, log);
                BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
                typedResponse.log = log;
                typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BATCHMETADATAUPDATE_EVENT));
        return batchMetadataUpdateEventFlowable(filter);
    }

    public List<MetadataUpdateEventResponse> getMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(METADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<MetadataUpdateEventResponse> responses = new ArrayList<MetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MetadataUpdateEventResponse>() {
            @Override
            public MetadataUpdateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(METADATAUPDATE_EVENT, log);
                MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
                typedResponse.log = log;
                typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(METADATAUPDATE_EVENT));
        return metadataUpdateEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<VoucherMintedEventResponse> getVoucherMintedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOUCHERMINTED_EVENT, transactionReceipt);
        ArrayList<VoucherMintedEventResponse> responses = new ArrayList<VoucherMintedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoucherMintedEventResponse typedResponse = new VoucherMintedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voucherId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoucherMintedEventResponse> voucherMintedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoucherMintedEventResponse>() {
            @Override
            public VoucherMintedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOUCHERMINTED_EVENT, log);
                VoucherMintedEventResponse typedResponse = new VoucherMintedEventResponse();
                typedResponse.log = log;
                typedResponse.voucherId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoucherMintedEventResponse> voucherMintedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOUCHERMINTED_EVENT));
        return voucherMintedEventFlowable(filter);
    }

    public List<VoucherRedeemedEventResponse> getVoucherRedeemedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOUCHERREDEEMED_EVENT, transactionReceipt);
        ArrayList<VoucherRedeemedEventResponse> responses = new ArrayList<VoucherRedeemedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoucherRedeemedEventResponse typedResponse = new VoucherRedeemedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voucherId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoucherRedeemedEventResponse> voucherRedeemedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoucherRedeemedEventResponse>() {
            @Override
            public VoucherRedeemedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOUCHERREDEEMED_EVENT, log);
                VoucherRedeemedEventResponse typedResponse = new VoucherRedeemedEventResponse();
                typedResponse.log = log;
                typedResponse.voucherId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoucherRedeemedEventResponse> voucherRedeemedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOUCHERREDEEMED_EVENT));
        return voucherRedeemedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<VoucherData> getVoucher(BigInteger voucherId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVOUCHER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(voucherId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<VoucherData>() {}));
        return executeRemoteCallSingleValueReturn(function, VoucherData.class);
    }

    public RemoteFunctionCall<String> helloWorld() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HELLOWORLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintVoucher(String recipient, String tokenURI, VoucherData data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTVOUCHER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.Utf8String(tokenURI), 
                data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> redeem(BigInteger voucherId, String supplierAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REDEEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(voucherId), 
                new org.web3j.abi.datatypes.Address(160, supplierAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Voucher load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Voucher(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Voucher load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Voucher(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Voucher load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Voucher(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Voucher load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Voucher(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Voucher> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Voucher.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Voucher> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Voucher.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Voucher> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voucher.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Voucher> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voucher.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class VoucherData extends DynamicStruct {
        public String brandID;

        public String influencerID;

        public String supplierIDs;

        public String productID;

        public Boolean redeemed;

        public BigInteger expiryDate;

        public VoucherData(String brandID, String influencerID, String supplierIDs, String productID, Boolean redeemed, BigInteger expiryDate) {
            super(new org.web3j.abi.datatypes.Utf8String(brandID),new org.web3j.abi.datatypes.Utf8String(influencerID),new org.web3j.abi.datatypes.Utf8String(supplierIDs),new org.web3j.abi.datatypes.Utf8String(productID),new org.web3j.abi.datatypes.Bool(redeemed),new org.web3j.abi.datatypes.generated.Uint256(expiryDate));
            this.brandID = brandID;
            this.influencerID = influencerID;
            this.supplierIDs = supplierIDs;
            this.productID = productID;
            this.redeemed = redeemed;
            this.expiryDate = expiryDate;
        }

        public VoucherData(Utf8String brandID, Utf8String influencerID, Utf8String supplierIDs, Utf8String productID, Bool redeemed, Uint256 expiryDate) {
            super(brandID,influencerID,supplierIDs,productID,redeemed,expiryDate);
            this.brandID = brandID.getValue();
            this.influencerID = influencerID.getValue();
            this.supplierIDs = supplierIDs.getValue();
            this.productID = productID.getValue();
            this.redeemed = redeemed.getValue();
            this.expiryDate = expiryDate.getValue();
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BatchMetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _fromTokenId;

        public BigInteger _toTokenId;
    }

    public static class MetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _tokenId;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class VoucherMintedEventResponse extends BaseEventResponse {
        public BigInteger voucherId;

        public String to;
    }

    public static class VoucherRedeemedEventResponse extends BaseEventResponse {
        public BigInteger voucherId;

        public String to;
    }
}
