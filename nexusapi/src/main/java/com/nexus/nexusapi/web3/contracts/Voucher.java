package com.nexus.nexusapi.web3.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.7.
 */
@SuppressWarnings("rawtypes")
public class Voucher extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b506040518060400160405280600f81526020017f5468654e65787573566f756368657200000000000000000000000000000000008152506040518060400160405280600481526020017f4e5856540000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000412565b508060019081620000a1919062000412565b505050620000c4620000b8620000ca60201b60201c565b620000d260201b60201c565b620004f9565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200021a57607f821691505b60208210810362000230576200022f620001d2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200029a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200025b565b620002a686836200025b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002f3620002ed620002e784620002be565b620002c8565b620002be565b9050919050565b6000819050919050565b6200030f83620002d2565b620003276200031e82620002fa565b84845462000268565b825550505050565b600090565b6200033e6200032f565b6200034b81848462000304565b505050565b5b8181101562000373576200036760008262000334565b60018101905062000351565b5050565b601f821115620003c2576200038c8162000236565b62000397846200024b565b81016020851015620003a7578190505b620003bf620003b6856200024b565b83018262000350565b50505b505050565b600082821c905092915050565b6000620003e760001984600802620003c7565b1980831691505092915050565b6000620004028383620003d4565b9150826002028217905092915050565b6200041d8262000198565b67ffffffffffffffff811115620004395762000438620001a3565b5b62000445825462000201565b6200045282828562000377565b600060209050601f8311600181146200048a576000841562000475578287015190505b620004818582620003f4565b865550620004f1565b601f1984166200049a8662000236565b60005b82811015620004c4578489015182556001820191506020850194506020810190506200049d565b86831015620004e45784890151620004e0601f891682620003d4565b8355505b6001600288020188555050505b505050505050565b6138c180620005096000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063715018a6116100ad578063c605f76c11610071578063c605f76c14610341578063c838c6681461035f578063c87b56dd1461037b578063e985e9c5146103ab578063f2fde38b146103db5761012c565b8063715018a6146102c35780638da5cb5b146102cd57806395d89b41146102eb578063a22cb46514610309578063b88d4fde146103255761012c565b806323b872dd116100f457806323b872dd146101fb57806342842e0e1461021757806352881f61146102335780636352211e1461026357806370a08231146102935761012c565b806301ffc9a71461013157806306fdde0314610161578063081812fc1461017f578063095ea7b3146101af5780630cfa2fd8146101cb575b600080fd5b61014b60048036038101906101469190612267565b6103f7565b60405161015891906122af565b60405180910390f35b610169610458565b604051610176919061235a565b60405180910390f35b610199600480360381019061019491906123b2565b6104ea565b6040516101a69190612420565b60405180910390f35b6101c960048036038101906101c49190612467565b610530565b005b6101e560048036038101906101e091906123b2565b610647565b6040516101f291906125c0565b60405180910390f35b610215600480360381019061021091906125e2565b6108eb565b005b610231600480360381019061022c91906125e2565b61094b565b005b61024d600480360381019061024891906128c4565b61096b565b60405161025a919061295e565b60405180910390f35b61027d600480360381019061027891906123b2565b610a93565b60405161028a9190612420565b60405180910390f35b6102ad60048036038101906102a89190612979565b610b19565b6040516102ba919061295e565b60405180910390f35b6102cb610bd0565b005b6102d5610be4565b6040516102e29190612420565b60405180910390f35b6102f3610c0e565b604051610300919061235a565b60405180910390f35b610323600480360381019061031e91906129a6565b610ca0565b005b61033f600480360381019061033a9190612a87565b610cb6565b005b610349610d18565b604051610356919061235a565b60405180910390f35b61037960048036038101906103749190612b0a565b610d55565b005b610395600480360381019061039091906123b2565b610de0565b6040516103a2919061235a565b60405180910390f35b6103c560048036038101906103c09190612b79565b610ef2565b6040516103d291906122af565b60405180910390f35b6103f560048036038101906103f09190612979565b610f86565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610451575061045082611009565b5b9050919050565b60606000805461046790612be8565b80601f016020809104026020016040519081016040528092919081815260200182805461049390612be8565b80156104e05780601f106104b5576101008083540402835291602001916104e0565b820191906000526020600020905b8154815290600101906020018083116104c357829003601f168201915b5050505050905090565b60006104f5826110eb565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061053b82610a93565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a290612c8b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105ca611136565b73ffffffffffffffffffffffffffffffffffffffff1614806105f957506105f8816105f3611136565b610ef2565b5b610638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062f90612d1d565b60405180910390fd5b610642838361113e565b505050565b61064f6121bc565b600960008381526020019081526020016000206040518060e001604052908160008201805461067d90612be8565b80601f01602080910402602001604051908101604052809291908181526020018280546106a990612be8565b80156106f65780601f106106cb576101008083540402835291602001916106f6565b820191906000526020600020905b8154815290600101906020018083116106d957829003601f168201915b5050505050815260200160018201805461070f90612be8565b80601f016020809104026020016040519081016040528092919081815260200182805461073b90612be8565b80156107885780601f1061075d57610100808354040283529160200191610788565b820191906000526020600020905b81548152906001019060200180831161076b57829003601f168201915b505050505081526020016002820180546107a190612be8565b80601f01602080910402602001604051908101604052809291908181526020018280546107cd90612be8565b801561081a5780601f106107ef5761010080835404028352916020019161081a565b820191906000526020600020905b8154815290600101906020018083116107fd57829003601f168201915b5050505050815260200160038201805461083390612be8565b80601f016020809104026020016040519081016040528092919081815260200182805461085f90612be8565b80156108ac5780601f10610881576101008083540402835291602001916108ac565b820191906000526020600020905b81548152906001019060200180831161088f57829003601f168201915b50505050508152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016006820154815250509050919050565b6108fc6108f6611136565b826111f7565b61093b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093290612daf565b60405180910390fd5b61094683838361128c565b505050565b61096683838360405180602001604052806000815250610cb6565b505050565b6000610975611585565b61097f6008611603565b600061098b6008611619565b90506109978582611627565b6109a18185611844565b826009600083815260200190815260200160002060008201518160000190816109ca9190612f7b565b5060208201518160010190816109e09190612f7b565b5060408201518160020190816109f69190612f7b565b506060820151816003019081610a0c9190612f7b565b506080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c082015181600601559050508473ffffffffffffffffffffffffffffffffffffffff16817f36788a01894812061bf3641fcbe673afab7b6d603992294baddab7df93de6f1660405160405180910390a3809150509392505050565b600080610a9f836118e8565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0790613099565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b809061312b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610bd8611585565b610be26000611925565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610c1d90612be8565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4990612be8565b8015610c965780601f10610c6b57610100808354040283529160200191610c96565b820191906000526020600020905b815481529060010190602001808311610c7957829003601f168201915b5050505050905090565b610cb2610cab611136565b83836119eb565b5050565b610cc7610cc1611136565b836111f7565b610d06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfd90612daf565b60405180910390fd5b610d1284848484611b57565b50505050565b60606040518060400160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250905090565b610d5e83611bb3565b610d688382611844565b60016009600085815260200190815260200160002060050160006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16837f2d3099bcbed5869eea6ce6e721ef55f107c936f9243bbc491edda76242f93cfd60405160405180910390a3505050565b6060610deb826110eb565b6000600660008481526020019081526020016000208054610e0b90612be8565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3790612be8565b8015610e845780601f10610e5957610100808354040283529160200191610e84565b820191906000526020600020905b815481529060010190602001808311610e6757829003601f168201915b505050505090506000610e95611cbb565b90506000815103610eaa578192505050610eed565b600082511115610edf578082604051602001610ec7929190613187565b60405160208183030381529060405292505050610eed565b610ee884611cd2565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610f8e611585565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff49061321d565b60405180910390fd5b61100681611925565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806110d457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110e457506110e382611d3a565b5b9050919050565b6110f481611da4565b611133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112a90613099565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166111b183610a93565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061120383610a93565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061124557506112448185610ef2565b5b8061128357508373ffffffffffffffffffffffffffffffffffffffff1661126b846104ea565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166112ac82610a93565b73ffffffffffffffffffffffffffffffffffffffff1614611302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f9906132af565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611371576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136890613341565b60405180910390fd5b61137e8383836001611de5565b8273ffffffffffffffffffffffffffffffffffffffff1661139e82610a93565b73ffffffffffffffffffffffffffffffffffffffff16146113f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113eb906132af565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115808383836001611deb565b505050565b61158d611136565b73ffffffffffffffffffffffffffffffffffffffff166115ab610be4565b73ffffffffffffffffffffffffffffffffffffffff1614611601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f8906133ad565b60405180910390fd5b565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611696576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168d90613419565b60405180910390fd5b61169f81611da4565b156116df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d690613485565b60405180910390fd5b6116ed600083836001611de5565b6116f681611da4565b15611736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172d90613485565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611840600083836001611deb565b5050565b61184d82611da4565b61188c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188390613517565b60405180910390fd5b806006600084815260200190815260200160002090816118ac9190612f7b565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516118dc919061295e565b60405180910390a15050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5090613583565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611b4a91906122af565b60405180910390a3505050565b611b6284848461128c565b611b6e84848484611df1565b611bad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba490613615565b60405180910390fd5b50505050565b611bbc81611da4565b611bfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf290613681565b60405180910390fd5b6009600082815260200190815260200160002060050160009054906101000a900460ff1615611c5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c56906136ed565b60405180910390fd5b4260096000838152602001908152602001600020600601541015611cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611caf90613759565b60405180910390fd5b50565b606060405180602001604052806000815250905090565b6060611cdd826110eb565b6000611ce7611cbb565b90506000815111611d075760405180602001604052806000815250611d32565b80611d1184611f78565b604051602001611d22929190613187565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611dc6836118e8565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b6000611e128473ffffffffffffffffffffffffffffffffffffffff16612046565b15611f6b578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611e3b611136565b8786866040518563ffffffff1660e01b8152600401611e5d94939291906137ce565b6020604051808303816000875af1925050508015611e9957506040513d601f19601f82011682018060405250810190611e96919061382f565b60015b611f1b573d8060008114611ec9576040519150601f19603f3d011682016040523d82523d6000602084013e611ece565b606091505b506000815103611f13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0a90613615565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611f70565b600190505b949350505050565b606060006001611f8784612069565b01905060008167ffffffffffffffff811115611fa657611fa561263f565b5b6040519080825280601f01601f191660200182016040528015611fd85781602001600182028036833780820191505090505b509050600082602001820190505b60011561203b578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161202f5761202e61385c565b5b04945060008503611fe6575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106120c7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816120bd576120bc61385c565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612104576d04ee2d6d415b85acef810000000083816120fa576120f961385c565b5b0492506020810190505b662386f26fc10000831061213357662386f26fc1000083816121295761212861385c565b5b0492506010810190505b6305f5e100831061215c576305f5e10083816121525761215161385c565b5b0492506008810190505b61271083106121815761271083816121775761217661385c565b5b0492506004810190505b606483106121a4576064838161219a5761219961385c565b5b0492506002810190505b600a83106121b3576001810190505b80915050919050565b6040518060e001604052806060815260200160608152602001606081526020016060815260200160008152602001600015158152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6122448161220f565b811461224f57600080fd5b50565b6000813590506122618161223b565b92915050565b60006020828403121561227d5761227c612205565b5b600061228b84828501612252565b91505092915050565b60008115159050919050565b6122a981612294565b82525050565b60006020820190506122c460008301846122a0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123045780820151818401526020810190506122e9565b60008484015250505050565b6000601f19601f8301169050919050565b600061232c826122ca565b61233681856122d5565b93506123468185602086016122e6565b61234f81612310565b840191505092915050565b600060208201905081810360008301526123748184612321565b905092915050565b6000819050919050565b61238f8161237c565b811461239a57600080fd5b50565b6000813590506123ac81612386565b92915050565b6000602082840312156123c8576123c7612205565b5b60006123d68482850161239d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061240a826123df565b9050919050565b61241a816123ff565b82525050565b60006020820190506124356000830184612411565b92915050565b612444816123ff565b811461244f57600080fd5b50565b6000813590506124618161243b565b92915050565b6000806040838503121561247e5761247d612205565b5b600061248c85828601612452565b925050602061249d8582860161239d565b9150509250929050565b600082825260208201905092915050565b60006124c3826122ca565b6124cd81856124a7565b93506124dd8185602086016122e6565b6124e681612310565b840191505092915050565b6124fa8161237c565b82525050565b61250981612294565b82525050565b600060e083016000830151848203600086015261252c82826124b8565b9150506020830151848203602086015261254682826124b8565b9150506040830151848203604086015261256082826124b8565b9150506060830151848203606086015261257a82826124b8565b915050608083015161258f60808601826124f1565b5060a08301516125a260a0860182612500565b5060c08301516125b560c08601826124f1565b508091505092915050565b600060208201905081810360008301526125da818461250f565b905092915050565b6000806000606084860312156125fb576125fa612205565b5b600061260986828701612452565b935050602061261a86828701612452565b925050604061262b8682870161239d565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61267782612310565b810181811067ffffffffffffffff821117156126965761269561263f565b5b80604052505050565b60006126a96121fb565b90506126b5828261266e565b919050565b600067ffffffffffffffff8211156126d5576126d461263f565b5b6126de82612310565b9050602081019050919050565b82818337600083830152505050565b600061270d612708846126ba565b61269f565b9050828152602081018484840111156127295761272861263a565b5b6127348482856126eb565b509392505050565b600082601f83011261275157612750612635565b5b81356127618482602086016126fa565b91505092915050565b600080fd5b600080fd5b61277d81612294565b811461278857600080fd5b50565b60008135905061279a81612774565b92915050565b600060e082840312156127b6576127b561276a565b5b6127c060e061269f565b9050600082013567ffffffffffffffff8111156127e0576127df61276f565b5b6127ec8482850161273c565b600083015250602082013567ffffffffffffffff8111156128105761280f61276f565b5b61281c8482850161273c565b602083015250604082013567ffffffffffffffff8111156128405761283f61276f565b5b61284c8482850161273c565b604083015250606082013567ffffffffffffffff8111156128705761286f61276f565b5b61287c8482850161273c565b60608301525060806128908482850161239d565b60808301525060a06128a48482850161278b565b60a08301525060c06128b88482850161239d565b60c08301525092915050565b6000806000606084860312156128dd576128dc612205565b5b60006128eb86828701612452565b935050602084013567ffffffffffffffff81111561290c5761290b61220a565b5b6129188682870161273c565b925050604084013567ffffffffffffffff8111156129395761293861220a565b5b612945868287016127a0565b9150509250925092565b6129588161237c565b82525050565b6000602082019050612973600083018461294f565b92915050565b60006020828403121561298f5761298e612205565b5b600061299d84828501612452565b91505092915050565b600080604083850312156129bd576129bc612205565b5b60006129cb85828601612452565b92505060206129dc8582860161278b565b9150509250929050565b600067ffffffffffffffff821115612a0157612a0061263f565b5b612a0a82612310565b9050602081019050919050565b6000612a2a612a25846129e6565b61269f565b905082815260208101848484011115612a4657612a4561263a565b5b612a518482856126eb565b509392505050565b600082601f830112612a6e57612a6d612635565b5b8135612a7e848260208601612a17565b91505092915050565b60008060008060808587031215612aa157612aa0612205565b5b6000612aaf87828801612452565b9450506020612ac087828801612452565b9350506040612ad18782880161239d565b925050606085013567ffffffffffffffff811115612af257612af161220a565b5b612afe87828801612a59565b91505092959194509250565b600080600060608486031215612b2357612b22612205565b5b6000612b318682870161239d565b9350506020612b4286828701612452565b925050604084013567ffffffffffffffff811115612b6357612b6261220a565b5b612b6f8682870161273c565b9150509250925092565b60008060408385031215612b9057612b8f612205565b5b6000612b9e85828601612452565b9250506020612baf85828601612452565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612c0057607f821691505b602082108103612c1357612c12612bb9565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c756021836122d5565b9150612c8082612c19565b604082019050919050565b60006020820190508181036000830152612ca481612c68565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612d07603d836122d5565b9150612d1282612cab565b604082019050919050565b60006020820190508181036000830152612d3681612cfa565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612d99602d836122d5565b9150612da482612d3d565b604082019050919050565b60006020820190508181036000830152612dc881612d8c565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612e317fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612df4565b612e3b8683612df4565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612e78612e73612e6e8461237c565b612e53565b61237c565b9050919050565b6000819050919050565b612e9283612e5d565b612ea6612e9e82612e7f565b848454612e01565b825550505050565b600090565b612ebb612eae565b612ec6818484612e89565b505050565b5b81811015612eea57612edf600082612eb3565b600181019050612ecc565b5050565b601f821115612f2f57612f0081612dcf565b612f0984612de4565b81016020851015612f18578190505b612f2c612f2485612de4565b830182612ecb565b50505b505050565b600082821c905092915050565b6000612f5260001984600802612f34565b1980831691505092915050565b6000612f6b8383612f41565b9150826002028217905092915050565b612f84826122ca565b67ffffffffffffffff811115612f9d57612f9c61263f565b5b612fa78254612be8565b612fb2828285612eee565b600060209050601f831160018114612fe55760008415612fd3578287015190505b612fdd8582612f5f565b865550613045565b601f198416612ff386612dcf565b60005b8281101561301b57848901518255600182019150602085019450602081019050612ff6565b868310156130385784890151613034601f891682612f41565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006130836018836122d5565b915061308e8261304d565b602082019050919050565b600060208201905081810360008301526130b281613076565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006131156029836122d5565b9150613120826130b9565b604082019050919050565b6000602082019050818103600083015261314481613108565b9050919050565b600081905092915050565b6000613161826122ca565b61316b818561314b565b935061317b8185602086016122e6565b80840191505092915050565b60006131938285613156565b915061319f8284613156565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006132076026836122d5565b9150613212826131ab565b604082019050919050565b60006020820190508181036000830152613236816131fa565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006132996025836122d5565b91506132a48261323d565b604082019050919050565b600060208201905081810360008301526132c88161328c565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061332b6024836122d5565b9150613336826132cf565b604082019050919050565b6000602082019050818103600083015261335a8161331e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006133976020836122d5565b91506133a282613361565b602082019050919050565b600060208201905081810360008301526133c68161338a565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006134036020836122d5565b915061340e826133cd565b602082019050919050565b60006020820190508181036000830152613432816133f6565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061346f601c836122d5565b915061347a82613439565b602082019050919050565b6000602082019050818103600083015261349e81613462565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613501602e836122d5565b915061350c826134a5565b604082019050919050565b60006020820190508181036000830152613530816134f4565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061356d6019836122d5565b915061357882613537565b602082019050919050565b6000602082019050818103600083015261359c81613560565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006135ff6032836122d5565b915061360a826135a3565b604082019050919050565b6000602082019050818103600083015261362e816135f2565b9050919050565b7f566f756368657220646f6573206e6f7420657869737400000000000000000000600082015250565b600061366b6016836122d5565b915061367682613635565b602082019050919050565b6000602082019050818103600083015261369a8161365e565b9050919050565b7f566f756368657220616c72656164792072656465656d65640000000000000000600082015250565b60006136d76018836122d5565b91506136e2826136a1565b602082019050919050565b60006020820190508181036000830152613706816136ca565b9050919050565b7f566f756368657220686173206578706972656400000000000000000000000000600082015250565b60006137436013836122d5565b915061374e8261370d565b602082019050919050565b6000602082019050818103600083015261377281613736565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006137a082613779565b6137aa8185613784565b93506137ba8185602086016122e6565b6137c381612310565b840191505092915050565b60006080820190506137e36000830187612411565b6137f06020830186612411565b6137fd604083018561294f565b818103606083015261380f8184613795565b905095945050505050565b6000815190506138298161223b565b92915050565b60006020828403121561384557613844612205565b5b60006138538482850161381a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea26469706673582212208db7a0f9cecd734ccd985e2ea0edc68c205cbcd2838624db288f96f710090e6f64736f6c63430008130033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETVOUCHER = "getVoucher";

    public static final String FUNC_HELLOWORLD = "helloWorld";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINTVOUCHER = "mintVoucher";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_REDEEM = "redeem";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event BATCHMETADATAUPDATE_EVENT = new Event("BatchMetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event METADATAUPDATE_EVENT = new Event("MetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event VOUCHERMINTED_EVENT = new Event("VoucherMinted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event VOUCHERREDEEMED_EVENT = new Event("VoucherRedeemed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected Voucher(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Voucher(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Voucher(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Voucher(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<BatchMetadataUpdateEventResponse> getBatchMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<BatchMetadataUpdateEventResponse> responses = new ArrayList<BatchMetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BatchMetadataUpdateEventResponse>() {
            @Override
            public BatchMetadataUpdateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, log);
                BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
                typedResponse.log = log;
                typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BATCHMETADATAUPDATE_EVENT));
        return batchMetadataUpdateEventFlowable(filter);
    }

    public List<MetadataUpdateEventResponse> getMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(METADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<MetadataUpdateEventResponse> responses = new ArrayList<MetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MetadataUpdateEventResponse>() {
            @Override
            public MetadataUpdateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(METADATAUPDATE_EVENT, log);
                MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
                typedResponse.log = log;
                typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(METADATAUPDATE_EVENT));
        return metadataUpdateEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<VoucherMintedEventResponse> getVoucherMintedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOUCHERMINTED_EVENT, transactionReceipt);
        ArrayList<VoucherMintedEventResponse> responses = new ArrayList<VoucherMintedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoucherMintedEventResponse typedResponse = new VoucherMintedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voucherId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoucherMintedEventResponse> voucherMintedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoucherMintedEventResponse>() {
            @Override
            public VoucherMintedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOUCHERMINTED_EVENT, log);
                VoucherMintedEventResponse typedResponse = new VoucherMintedEventResponse();
                typedResponse.log = log;
                typedResponse.voucherId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoucherMintedEventResponse> voucherMintedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOUCHERMINTED_EVENT));
        return voucherMintedEventFlowable(filter);
    }

    public List<VoucherRedeemedEventResponse> getVoucherRedeemedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOUCHERREDEEMED_EVENT, transactionReceipt);
        ArrayList<VoucherRedeemedEventResponse> responses = new ArrayList<VoucherRedeemedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoucherRedeemedEventResponse typedResponse = new VoucherRedeemedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voucherId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoucherRedeemedEventResponse> voucherRedeemedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoucherRedeemedEventResponse>() {
            @Override
            public VoucherRedeemedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOUCHERREDEEMED_EVENT, log);
                VoucherRedeemedEventResponse typedResponse = new VoucherRedeemedEventResponse();
                typedResponse.log = log;
                typedResponse.voucherId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoucherRedeemedEventResponse> voucherRedeemedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOUCHERREDEEMED_EVENT));
        return voucherRedeemedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<VoucherData> getVoucher(BigInteger voucherId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVOUCHER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(voucherId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<VoucherData>() {}));
        return executeRemoteCallSingleValueReturn(function, VoucherData.class);
    }

    public RemoteFunctionCall<String> helloWorld() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HELLOWORLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintVoucher(String recipient, String tokenURI, VoucherData data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTVOUCHER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.Utf8String(tokenURI), 
                data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> redeem(BigInteger voucherId, String supplierAddress, String tokenURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REDEEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(voucherId), 
                new org.web3j.abi.datatypes.Address(160, supplierAddress), 
                new org.web3j.abi.datatypes.Utf8String(tokenURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Voucher load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Voucher(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Voucher load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Voucher(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Voucher load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Voucher(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Voucher load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Voucher(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Voucher> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Voucher.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Voucher> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Voucher.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Voucher> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voucher.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Voucher> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voucher.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class VoucherData extends DynamicStruct {
        public String brandID;

        public String influencerID;

        public String supplierIDs;

        public String productID;

        public BigInteger price;

        public Boolean redeemed;

        public BigInteger expiryDate;

        public VoucherData(String brandID, String influencerID, String supplierIDs, String productID, BigInteger price, Boolean redeemed, BigInteger expiryDate) {
            super(new org.web3j.abi.datatypes.Utf8String(brandID),new org.web3j.abi.datatypes.Utf8String(influencerID),new org.web3j.abi.datatypes.Utf8String(supplierIDs),new org.web3j.abi.datatypes.Utf8String(productID),new org.web3j.abi.datatypes.generated.Uint256(price),new org.web3j.abi.datatypes.Bool(redeemed),new org.web3j.abi.datatypes.generated.Uint256(expiryDate));
            this.brandID = brandID;
            this.influencerID = influencerID;
            this.supplierIDs = supplierIDs;
            this.productID = productID;
            this.price = price;
            this.redeemed = redeemed;
            this.expiryDate = expiryDate;
        }

        public VoucherData(Utf8String brandID, Utf8String influencerID, Utf8String supplierIDs, Utf8String productID, Uint256 price, Bool redeemed, Uint256 expiryDate) {
            super(brandID,influencerID,supplierIDs,productID,price,redeemed,expiryDate);
            this.brandID = brandID.getValue();
            this.influencerID = influencerID.getValue();
            this.supplierIDs = supplierIDs.getValue();
            this.productID = productID.getValue();
            this.price = price.getValue();
            this.redeemed = redeemed.getValue();
            this.expiryDate = expiryDate.getValue();
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BatchMetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _fromTokenId;

        public BigInteger _toTokenId;
    }

    public static class MetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _tokenId;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class VoucherMintedEventResponse extends BaseEventResponse {
        public BigInteger voucherId;

        public String to;
    }

    public static class VoucherRedeemedEventResponse extends BaseEventResponse {
        public BigInteger voucherId;

        public String to;
    }
}
