package com.nexus.nexusapi.web3.contracts;


import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.7.
 */
@SuppressWarnings("rawtypes")
public class Voucher extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b506040518060400160405280600c81526020017f4e65787573566f756368657200000000000000000000000000000000000000008152506040518060400160405280600381526020017f4e5856000000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000412565b508060019081620000a1919062000412565b505050620000c4620000b8620000ca60201b60201c565b620000d260201b60201c565b620004f9565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200021a57607f821691505b60208210810362000230576200022f620001d2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200029a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200025b565b620002a686836200025b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002f3620002ed620002e784620002be565b620002c8565b620002be565b9050919050565b6000819050919050565b6200030f83620002d2565b620003276200031e82620002fa565b84845462000268565b825550505050565b600090565b6200033e6200032f565b6200034b81848462000304565b505050565b5b8181101562000373576200036760008262000334565b60018101905062000351565b5050565b601f821115620003c2576200038c8162000236565b62000397846200024b565b81016020851015620003a7578190505b620003bf620003b6856200024b565b83018262000350565b50505b505050565b600082821c905092915050565b6000620003e760001984600802620003c7565b1980831691505092915050565b6000620004028383620003d4565b9150826002028217905092915050565b6200041d8262000198565b67ffffffffffffffff811115620004395762000438620001a3565b5b62000445825462000201565b6200045282828562000377565b600060209050601f8311600181146200048a576000841562000475578287015190505b620004818582620003f4565b865550620004f1565b601f1984166200049a8662000236565b60005b82811015620004c4578489015182556001820191506020850194506020810190506200049d565b86831015620004e45784890151620004e0601f891682620003d4565b8355505b6001600288020188555050505b505050505050565b613abd80620005096000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80637bde82f2116100b8578063c605f76c1161007c578063c605f76c14610338578063c87b56dd14610356578063e985e9c514610386578063f2fde38b146103b6578063f42375b5146103d2578063f6805db1146103ee57610137565b80637bde82f2146102a85780638da5cb5b146102c457806395d89b41146102e2578063a22cb46514610300578063b88d4fde1461031c57610137565b806323b872dd116100ff57806323b872dd1461020657806342842e0e146102225780636352211e1461023e57806370a082311461026e578063715018a61461029e57610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba5780630cfa2fd8146101d6575b600080fd5b610156600480360381019061015191906123f1565b61041e565b6040516101639190612439565b60405180910390f35b61017461047f565b60405161018191906124e4565b60405180910390f35b6101a4600480360381019061019f919061253c565b610511565b6040516101b191906125aa565b60405180910390f35b6101d460048036038101906101cf91906125f1565b610557565b005b6101f060048036038101906101eb919061253c565b61066e565b6040516101fd9190612751565b60405180910390f35b610220600480360381019061021b9190612773565b61099a565b005b61023c60048036038101906102379190612773565b6109fa565b005b6102586004803603810190610253919061253c565b610a1a565b60405161026591906125aa565b60405180910390f35b610288600480360381019061028391906127c6565b610aa0565b6040516102959190612802565b60405180910390f35b6102a6610b57565b005b6102c260048036038101906102bd919061281d565b610b6b565b005b6102cc610c79565b6040516102d991906125aa565b60405180910390f35b6102ea610ca3565b6040516102f791906124e4565b60405180910390f35b61031a60048036038101906103159190612889565b610d35565b005b610336600480360381019061033191906129fe565b610d4b565b005b610340610dad565b60405161034d91906124e4565b60405180910390f35b610370600480360381019061036b919061253c565b610dea565b60405161037d91906124e4565b60405180910390f35b6103a0600480360381019061039b9190612a81565b610efc565b6040516103ad9190612439565b60405180910390f35b6103d060048036038101906103cb91906127c6565b610f90565b005b6103ec60048036038101906103e791906127c6565b611013565b005b61040860048036038101906104039190612cac565b61105f565b6040516104159190612802565b60405180910390f35b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610478575061047782611193565b5b9050919050565b60606000805461048e90612d66565b80601f01602080910402602001604051908101604052809291908181526020018280546104ba90612d66565b80156105075780601f106104dc57610100808354040283529160200191610507565b820191906000526020600020905b8154815290600101906020018083116104ea57829003601f168201915b5050505050905090565b600061051c82611275565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061056282610a1a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c990612e09565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105f16112c0565b73ffffffffffffffffffffffffffffffffffffffff161480610620575061061f8161061a6112c0565b610efc565b5b61065f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065690612e9b565b60405180910390fd5b61066983836112c8565b505050565b610676612346565b600960008381526020019081526020016000206040518060e00160405290816000820180546106a490612d66565b80601f01602080910402602001604051908101604052809291908181526020018280546106d090612d66565b801561071d5780601f106106f25761010080835404028352916020019161071d565b820191906000526020600020905b81548152906001019060200180831161070057829003601f168201915b5050505050815260200160018201805461073690612d66565b80601f016020809104026020016040519081016040528092919081815260200182805461076290612d66565b80156107af5780601f10610784576101008083540402835291602001916107af565b820191906000526020600020905b81548152906001019060200180831161079257829003601f168201915b505050505081526020016002820180546107c890612d66565b80601f01602080910402602001604051908101604052809291908181526020018280546107f490612d66565b80156108415780601f1061081657610100808354040283529160200191610841565b820191906000526020600020905b81548152906001019060200180831161082457829003601f168201915b5050505050815260200160038201805461085a90612d66565b80601f016020809104026020016040519081016040528092919081815260200182805461088690612d66565b80156108d35780601f106108a8576101008083540402835291602001916108d3565b820191906000526020600020905b8154815290600101906020018083116108b657829003601f168201915b505050505081526020016004820180546108ec90612d66565b80601f016020809104026020016040519081016040528092919081815260200182805461091890612d66565b80156109655780601f1061093a57610100808354040283529160200191610965565b820191906000526020600020905b81548152906001019060200180831161094857829003601f168201915b505050505081526020016005820160009054906101000a900460ff161515151581526020016006820154815250509050919050565b6109ab6109a56112c0565b82611381565b6109ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e190612f2d565b60405180910390fd5b6109f5838383611416565b505050565b610a1583838360405180602001604052806000815250610d4b565b505050565b600080610a268361170f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8e90612f99565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b079061302b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610b5f61174c565b610b6960006117ca565b565b610b7482611890565b60016009600084815260200190815260200160002060050160006101000a81548160ff021916908315150217905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662f714ce83836040518363ffffffff1660e01b8152600401610bff9291906130aa565b600060405180830381600087803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16827f2d3099bcbed5869eea6ce6e721ef55f107c936f9243bbc491edda76242f93cfd60405160405180910390a35050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610cb290612d66565b80601f0160208091040260200160405190810160405280929190818152602001828054610cde90612d66565b8015610d2b5780601f10610d0057610100808354040283529160200191610d2b565b820191906000526020600020905b815481529060010190602001808311610d0e57829003601f168201915b5050505050905090565b610d47610d406112c0565b8383611998565b5050565b610d5c610d566112c0565b83611381565b610d9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9290612f2d565b60405180910390fd5b610da784848484611b04565b50505050565b60606040518060400160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250905090565b6060610df582611275565b6000600660008481526020019081526020016000208054610e1590612d66565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4190612d66565b8015610e8e5780601f10610e6357610100808354040283529160200191610e8e565b820191906000526020600020905b815481529060010190602001808311610e7157829003601f168201915b505050505090506000610e9f611b60565b90506000815103610eb4578192505050610ef7565b600082511115610ee9578082604051602001610ed192919061310f565b60405160208183030381529060405292505050610ef7565b610ef284611b77565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610f9861174c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611007576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffe906131a5565b60405180910390fd5b611010816117ca565b50565b61101b61174c565b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061106961174c565b6110736008611bdf565b600061107f6008611bf5565b905061108b8582611c03565b6110958185611e20565b826009600083815260200190815260200160002060008201518160000190816110be9190613367565b5060208201518160010190816110d49190613367565b5060408201518160020190816110ea9190613367565b5060608201518160030190816111009190613367565b5060808201518160040190816111169190613367565b5060a08201518160050160006101000a81548160ff02191690831515021790555060c082015181600601559050508473ffffffffffffffffffffffffffffffffffffffff16817f36788a01894812061bf3641fcbe673afab7b6d603992294baddab7df93de6f1660405160405180910390a3809150509392505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061125e57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061126e575061126d82611ec4565b5b9050919050565b61127e81611f2e565b6112bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b490612f99565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661133b83610a1a565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061138d83610a1a565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113cf57506113ce8185610efc565b5b8061140d57508373ffffffffffffffffffffffffffffffffffffffff166113f584610511565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661143682610a1a565b73ffffffffffffffffffffffffffffffffffffffff161461148c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611483906134ab565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f29061353d565b60405180910390fd5b6115088383836001611f6f565b8273ffffffffffffffffffffffffffffffffffffffff1661152882610a1a565b73ffffffffffffffffffffffffffffffffffffffff161461157e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611575906134ab565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461170a8383836001611f75565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6117546112c0565b73ffffffffffffffffffffffffffffffffffffffff16611772610c79565b73ffffffffffffffffffffffffffffffffffffffff16146117c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bf906135a9565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61189981611f2e565b6118d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cf90613615565b60405180910390fd5b6009600082815260200190815260200160002060050160009054906101000a900460ff161561193c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193390613681565b60405180910390fd5b4260096000838152602001908152602001600020600601541015611995576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198c906136ed565b60405180910390fd5b50565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611a06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fd90613759565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611af79190612439565b60405180910390a3505050565b611b0f848484611416565b611b1b84848484611f7b565b611b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b51906137eb565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611b8282611275565b6000611b8c611b60565b90506000815111611bac5760405180602001604052806000815250611bd7565b80611bb684612102565b604051602001611bc792919061310f565b6040516020818303038152906040525b915050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6990613857565b60405180910390fd5b611c7b81611f2e565b15611cbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb2906138c3565b60405180910390fd5b611cc9600083836001611f6f565b611cd281611f2e565b15611d12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d09906138c3565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611e1c600083836001611f75565b5050565b611e2982611f2e565b611e68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5f90613955565b60405180910390fd5b80600660008481526020019081526020016000209081611e889190613367565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051611eb89190612802565b60405180910390a15050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611f508361170f565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b6000611f9c8473ffffffffffffffffffffffffffffffffffffffff166121d0565b156120f5578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611fc56112c0565b8786866040518563ffffffff1660e01b8152600401611fe794939291906139ca565b6020604051808303816000875af192505050801561202357506040513d601f19601f820116820180604052508101906120209190613a2b565b60015b6120a5573d8060008114612053576040519150601f19603f3d011682016040523d82523d6000602084013e612058565b606091505b50600081510361209d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612094906137eb565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506120fa565b600190505b949350505050565b606060006001612111846121f3565b01905060008167ffffffffffffffff8111156121305761212f6128d3565b5b6040519080825280601f01601f1916602001820160405280156121625781602001600182028036833780820191505090505b509050600082602001820190505b6001156121c5578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816121b9576121b8613a58565b5b04945060008503612170575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612251577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161224757612246613a58565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061228e576d04ee2d6d415b85acef8100000000838161228457612283613a58565b5b0492506020810190505b662386f26fc1000083106122bd57662386f26fc1000083816122b3576122b2613a58565b5b0492506010810190505b6305f5e10083106122e6576305f5e10083816122dc576122db613a58565b5b0492506008810190505b612710831061230b57612710838161230157612300613a58565b5b0492506004810190505b6064831061232e576064838161232457612323613a58565b5b0492506002810190505b600a831061233d576001810190505b80915050919050565b6040518060e001604052806060815260200160608152602001606081526020016060815260200160608152602001600015158152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6123ce81612399565b81146123d957600080fd5b50565b6000813590506123eb816123c5565b92915050565b6000602082840312156124075761240661238f565b5b6000612415848285016123dc565b91505092915050565b60008115159050919050565b6124338161241e565b82525050565b600060208201905061244e600083018461242a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561248e578082015181840152602081019050612473565b60008484015250505050565b6000601f19601f8301169050919050565b60006124b682612454565b6124c0818561245f565b93506124d0818560208601612470565b6124d98161249a565b840191505092915050565b600060208201905081810360008301526124fe81846124ab565b905092915050565b6000819050919050565b61251981612506565b811461252457600080fd5b50565b60008135905061253681612510565b92915050565b6000602082840312156125525761255161238f565b5b600061256084828501612527565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061259482612569565b9050919050565b6125a481612589565b82525050565b60006020820190506125bf600083018461259b565b92915050565b6125ce81612589565b81146125d957600080fd5b50565b6000813590506125eb816125c5565b92915050565b600080604083850312156126085761260761238f565b5b6000612616858286016125dc565b925050602061262785828601612527565b9150509250929050565b600082825260208201905092915050565b600061264d82612454565b6126578185612631565b9350612667818560208601612470565b6126708161249a565b840191505092915050565b6126848161241e565b82525050565b61269381612506565b82525050565b600060e08301600083015184820360008601526126b68282612642565b915050602083015184820360208601526126d08282612642565b915050604083015184820360408601526126ea8282612642565b915050606083015184820360608601526127048282612642565b9150506080830151848203608086015261271e8282612642565b91505060a083015161273360a086018261267b565b5060c083015161274660c086018261268a565b508091505092915050565b6000602082019050818103600083015261276b8184612699565b905092915050565b60008060006060848603121561278c5761278b61238f565b5b600061279a868287016125dc565b93505060206127ab868287016125dc565b92505060406127bc86828701612527565b9150509250925092565b6000602082840312156127dc576127db61238f565b5b60006127ea848285016125dc565b91505092915050565b6127fc81612506565b82525050565b600060208201905061281760008301846127f3565b92915050565b600080604083850312156128345761283361238f565b5b600061284285828601612527565b9250506020612853858286016125dc565b9150509250929050565b6128668161241e565b811461287157600080fd5b50565b6000813590506128838161285d565b92915050565b600080604083850312156128a05761289f61238f565b5b60006128ae858286016125dc565b92505060206128bf85828601612874565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61290b8261249a565b810181811067ffffffffffffffff8211171561292a576129296128d3565b5b80604052505050565b600061293d612385565b90506129498282612902565b919050565b600067ffffffffffffffff821115612969576129686128d3565b5b6129728261249a565b9050602081019050919050565b82818337600083830152505050565b60006129a161299c8461294e565b612933565b9050828152602081018484840111156129bd576129bc6128ce565b5b6129c884828561297f565b509392505050565b600082601f8301126129e5576129e46128c9565b5b81356129f584826020860161298e565b91505092915050565b60008060008060808587031215612a1857612a1761238f565b5b6000612a26878288016125dc565b9450506020612a37878288016125dc565b9350506040612a4887828801612527565b925050606085013567ffffffffffffffff811115612a6957612a68612394565b5b612a75878288016129d0565b91505092959194509250565b60008060408385031215612a9857612a9761238f565b5b6000612aa6858286016125dc565b9250506020612ab7858286016125dc565b9150509250929050565b600067ffffffffffffffff821115612adc57612adb6128d3565b5b612ae58261249a565b9050602081019050919050565b6000612b05612b0084612ac1565b612933565b905082815260208101848484011115612b2157612b206128ce565b5b612b2c84828561297f565b509392505050565b600082601f830112612b4957612b486128c9565b5b8135612b59848260208601612af2565b91505092915050565b600080fd5b600080fd5b600060e08284031215612b8257612b81612b62565b5b612b8c60e0612933565b9050600082013567ffffffffffffffff811115612bac57612bab612b67565b5b612bb884828501612b34565b600083015250602082013567ffffffffffffffff811115612bdc57612bdb612b67565b5b612be884828501612b34565b602083015250604082013567ffffffffffffffff811115612c0c57612c0b612b67565b5b612c1884828501612b34565b604083015250606082013567ffffffffffffffff811115612c3c57612c3b612b67565b5b612c4884828501612b34565b606083015250608082013567ffffffffffffffff811115612c6c57612c6b612b67565b5b612c7884828501612b34565b60808301525060a0612c8c84828501612874565b60a08301525060c0612ca084828501612527565b60c08301525092915050565b600080600060608486031215612cc557612cc461238f565b5b6000612cd3868287016125dc565b935050602084013567ffffffffffffffff811115612cf457612cf3612394565b5b612d0086828701612b34565b925050604084013567ffffffffffffffff811115612d2157612d20612394565b5b612d2d86828701612b6c565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612d7e57607f821691505b602082108103612d9157612d90612d37565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612df360218361245f565b9150612dfe82612d97565b604082019050919050565b60006020820190508181036000830152612e2281612de6565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612e85603d8361245f565b9150612e9082612e29565b604082019050919050565b60006020820190508181036000830152612eb481612e78565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612f17602d8361245f565b9150612f2282612ebb565b604082019050919050565b60006020820190508181036000830152612f4681612f0a565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612f8360188361245f565b9150612f8e82612f4d565b602082019050919050565b60006020820190508181036000830152612fb281612f76565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061301560298361245f565b915061302082612fb9565b604082019050919050565b6000602082019050818103600083015261304481613008565b9050919050565b6000819050919050565b600061307061306b61306684612569565b61304b565b612569565b9050919050565b600061308282613055565b9050919050565b600061309482613077565b9050919050565b6130a481613089565b82525050565b60006040820190506130bf60008301856127f3565b6130cc602083018461309b565b9392505050565b600081905092915050565b60006130e982612454565b6130f381856130d3565b9350613103818560208601612470565b80840191505092915050565b600061311b82856130de565b915061312782846130de565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061318f60268361245f565b915061319a82613133565b604082019050919050565b600060208201905081810360008301526131be81613182565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026132277fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826131ea565b61323186836131ea565b95508019841693508086168417925050509392505050565b600061326461325f61325a84612506565b61304b565b612506565b9050919050565b6000819050919050565b61327e83613249565b61329261328a8261326b565b8484546131f7565b825550505050565b600090565b6132a761329a565b6132b2818484613275565b505050565b5b818110156132d6576132cb60008261329f565b6001810190506132b8565b5050565b601f82111561331b576132ec816131c5565b6132f5846131da565b81016020851015613304578190505b613318613310856131da565b8301826132b7565b50505b505050565b600082821c905092915050565b600061333e60001984600802613320565b1980831691505092915050565b6000613357838361332d565b9150826002028217905092915050565b61337082612454565b67ffffffffffffffff811115613389576133886128d3565b5b6133938254612d66565b61339e8282856132da565b600060209050601f8311600181146133d157600084156133bf578287015190505b6133c9858261334b565b865550613431565b601f1984166133df866131c5565b60005b82811015613407578489015182556001820191506020850194506020810190506133e2565b868310156134245784890151613420601f89168261332d565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061349560258361245f565b91506134a082613439565b604082019050919050565b600060208201905081810360008301526134c481613488565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061352760248361245f565b9150613532826134cb565b604082019050919050565b600060208201905081810360008301526135568161351a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061359360208361245f565b915061359e8261355d565b602082019050919050565b600060208201905081810360008301526135c281613586565b9050919050565b7f566f756368657220646f6573206e6f7420657869737400000000000000000000600082015250565b60006135ff60168361245f565b915061360a826135c9565b602082019050919050565b6000602082019050818103600083015261362e816135f2565b9050919050565b7f566f756368657220616c72656164792072656465656d65640000000000000000600082015250565b600061366b60188361245f565b915061367682613635565b602082019050919050565b6000602082019050818103600083015261369a8161365e565b9050919050565b7f566f756368657220686173206578706972656400000000000000000000000000600082015250565b60006136d760138361245f565b91506136e2826136a1565b602082019050919050565b60006020820190508181036000830152613706816136ca565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061374360198361245f565b915061374e8261370d565b602082019050919050565b6000602082019050818103600083015261377281613736565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006137d560328361245f565b91506137e082613779565b604082019050919050565b60006020820190508181036000830152613804816137c8565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061384160208361245f565b915061384c8261380b565b602082019050919050565b6000602082019050818103600083015261387081613834565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006138ad601c8361245f565b91506138b882613877565b602082019050919050565b600060208201905081810360008301526138dc816138a0565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b600061393f602e8361245f565b915061394a826138e3565b604082019050919050565b6000602082019050818103600083015261396e81613932565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061399c82613975565b6139a68185613980565b93506139b6818560208601612470565b6139bf8161249a565b840191505092915050565b60006080820190506139df600083018761259b565b6139ec602083018661259b565b6139f960408301856127f3565b8181036060830152613a0b8184613991565b905095945050505050565b600081519050613a25816123c5565b92915050565b600060208284031215613a4157613a4061238f565b5b6000613a4f84828501613a16565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220a8f5b8fc14966a89bac0ebb680f4f052e4ccd5baee1d4dc325bbf0ea672677d264736f6c63430008130033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETVOUCHER = "getVoucher";

    public static final String FUNC_HELLOWORLD = "helloWorld";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINTVOUCHER = "mintVoucher";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_REDEEM = "redeem";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETESCROWCONTRACT = "setEscrowContract";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event BATCHMETADATAUPDATE_EVENT = new Event("BatchMetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event METADATAUPDATE_EVENT = new Event("MetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event VOUCHERMINTED_EVENT = new Event("VoucherMinted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event VOUCHERREDEEMED_EVENT = new Event("VoucherRedeemed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected Voucher(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Voucher(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Voucher(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Voucher(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<BatchMetadataUpdateEventResponse> getBatchMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<BatchMetadataUpdateEventResponse> responses = new ArrayList<BatchMetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BatchMetadataUpdateEventResponse>() {
            @Override
            public BatchMetadataUpdateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, log);
                BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
                typedResponse.log = log;
                typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BATCHMETADATAUPDATE_EVENT));
        return batchMetadataUpdateEventFlowable(filter);
    }

    public List<MetadataUpdateEventResponse> getMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(METADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<MetadataUpdateEventResponse> responses = new ArrayList<MetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MetadataUpdateEventResponse>() {
            @Override
            public MetadataUpdateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(METADATAUPDATE_EVENT, log);
                MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
                typedResponse.log = log;
                typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(METADATAUPDATE_EVENT));
        return metadataUpdateEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<VoucherMintedEventResponse> getVoucherMintedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOUCHERMINTED_EVENT, transactionReceipt);
        ArrayList<VoucherMintedEventResponse> responses = new ArrayList<VoucherMintedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoucherMintedEventResponse typedResponse = new VoucherMintedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voucherId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoucherMintedEventResponse> voucherMintedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoucherMintedEventResponse>() {
            @Override
            public VoucherMintedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOUCHERMINTED_EVENT, log);
                VoucherMintedEventResponse typedResponse = new VoucherMintedEventResponse();
                typedResponse.log = log;
                typedResponse.voucherId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoucherMintedEventResponse> voucherMintedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOUCHERMINTED_EVENT));
        return voucherMintedEventFlowable(filter);
    }

    public List<VoucherRedeemedEventResponse> getVoucherRedeemedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOUCHERREDEEMED_EVENT, transactionReceipt);
        ArrayList<VoucherRedeemedEventResponse> responses = new ArrayList<VoucherRedeemedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoucherRedeemedEventResponse typedResponse = new VoucherRedeemedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voucherId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoucherRedeemedEventResponse> voucherRedeemedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoucherRedeemedEventResponse>() {
            @Override
            public VoucherRedeemedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOUCHERREDEEMED_EVENT, log);
                VoucherRedeemedEventResponse typedResponse = new VoucherRedeemedEventResponse();
                typedResponse.log = log;
                typedResponse.voucherId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoucherRedeemedEventResponse> voucherRedeemedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOUCHERREDEEMED_EVENT));
        return voucherRedeemedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<VoucherData> getVoucher(BigInteger voucherId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVOUCHER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(voucherId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<VoucherData>() {}));
        return executeRemoteCallSingleValueReturn(function, VoucherData.class);
    }

    public RemoteFunctionCall<String> helloWorld() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HELLOWORLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintVoucher(String recipient, String tokenURI, VoucherData data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTVOUCHER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.Utf8String(tokenURI), 
                data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> redeem(BigInteger voucherId, String supplierAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REDEEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(voucherId), 
                new org.web3j.abi.datatypes.Address(160, supplierAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setEscrowContract(String _escrowContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETESCROWCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _escrowContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Voucher load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Voucher(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Voucher load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Voucher(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Voucher load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Voucher(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Voucher load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Voucher(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Voucher> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Voucher.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Voucher> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Voucher.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Voucher> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voucher.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Voucher> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voucher.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class VoucherData extends DynamicStruct {
        public String brandID;

        public String influencerID;

        public String supplierID;

        public String productID;

        public String productDescription;

        public Boolean redeemed;

        public BigInteger expiryDate;

        public VoucherData(String brandID, String influencerID, String supplierID, String productID, String productDescription, Boolean redeemed, BigInteger expiryDate) {
            super(new org.web3j.abi.datatypes.Utf8String(brandID),new org.web3j.abi.datatypes.Utf8String(influencerID),new org.web3j.abi.datatypes.Utf8String(supplierID),new org.web3j.abi.datatypes.Utf8String(productID),new org.web3j.abi.datatypes.Utf8String(productDescription),new org.web3j.abi.datatypes.Bool(redeemed),new org.web3j.abi.datatypes.generated.Uint256(expiryDate));
            this.brandID = brandID;
            this.influencerID = influencerID;
            this.supplierID = supplierID;
            this.productID = productID;
            this.productDescription = productDescription;
            this.redeemed = redeemed;
            this.expiryDate = expiryDate;
        }

        public VoucherData(Utf8String brandID, Utf8String influencerID, Utf8String supplierID, Utf8String productID, Utf8String productDescription, Bool redeemed, Uint256 expiryDate) {
            super(brandID,influencerID,supplierID,productID,productDescription,redeemed,expiryDate);
            this.brandID = brandID.getValue();
            this.influencerID = influencerID.getValue();
            this.supplierID = supplierID.getValue();
            this.productID = productID.getValue();
            this.productDescription = productDescription.getValue();
            this.redeemed = redeemed.getValue();
            this.expiryDate = expiryDate.getValue();
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BatchMetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _fromTokenId;

        public BigInteger _toTokenId;
    }

    public static class MetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _tokenId;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class VoucherMintedEventResponse extends BaseEventResponse {
        public BigInteger voucherId;

        public String to;
    }

    public static class VoucherRedeemedEventResponse extends BaseEventResponse {
        public BigInteger voucherId;

        public String to;
    }
}
